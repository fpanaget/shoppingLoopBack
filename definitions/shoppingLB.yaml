paths:
  '/products/{id}/orders/{fk}':
    get:
      tags:
        - product
      summary: Find a related item by id for orders.
      operationId: product.prototype.__findById__orders
      parameters:
        - name: fk
          in: path
          description: Foreign key for orders
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
    delete:
      tags:
        - product
      summary: Delete a related item by id for orders.
      operationId: product.prototype.__destroyById__orders
      parameters:
        - name: fk
          in: path
          description: Foreign key for orders
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - product
      summary: Update a related item by id for orders.
      operationId: product.prototype.__updateById__orders
      parameters:
        - name: fk
          in: path
          description: Foreign key for orders
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/order'
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
  '/products/{id}/orders/rel/{fk}':
    put:
      tags:
        - product
      summary: Add a related item by id for orders.
      operationId: product.prototype.__link__orders
      parameters:
        - name: fk
          in: path
          description: Foreign key for orders
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/orderproduct'
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orderproduct'
      deprecated: false
    delete:
      tags:
        - product
      summary: Remove the orders relation to an item by id.
      operationId: product.prototype.__unlink__orders
      parameters:
        - name: fk
          in: path
          description: Foreign key for orders
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - product
      summary: Check the existence of orders relation to an item by id.
      operationId: product.prototype.__exists__orders
      parameters:
        - name: fk
          in: path
          description: Foreign key for orders
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/products/{id}/orders':
    get:
      tags:
        - product
      summary: Queries orders of product.
      operationId: product.prototype.__get__orders
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/order'
      deprecated: false
    post:
      tags:
        - product
      summary: Creates a new instance in orders of this model.
      operationId: product.prototype.__create__orders
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/order'
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
    delete:
      tags:
        - product
      summary: Deletes all orders of this model.
      operationId: product.prototype.__delete__orders
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/products/{id}/orders/count':
    get:
      tags:
        - product
      summary: Counts orders of product.
      operationId: product.prototype.__count__orders
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /products:
    post:
      tags:
        - product
      summary: Create a new instance of the model and persist it into the data source.
      operationId: product.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    put:
      tags:
        - product
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: product.upsert__put_products
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    patch:
      tags:
        - product
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: product.upsert__patch_products
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    get:
      tags:
        - product
      summary: Find all instances of the model matched by filter from the data source.
      operationId: product.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/product'
      deprecated: false
  /products/replaceOrCreate:
    post:
      tags:
        - product
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: product.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  /products/upsertWithWhere:
    post:
      tags:
        - product
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: product.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  '/products/{id}/exists':
    get:
      tags:
        - product
      summary: Check whether a model instance exists in the data source.
      operationId: 'product.exists__get_products_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/products/{id}':
    head:
      tags:
        - product
      summary: Check whether a model instance exists in the data source.
      operationId: 'product.exists__head_products_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - product
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: product.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    delete:
      tags:
        - product
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: product.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - product
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'product.prototype.updateAttributes__put_products_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/product'
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    patch:
      tags:
        - product
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'product.prototype.updateAttributes__patch_products_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/product'
        - name: id
          in: path
          description: product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  '/products/{id}/replace':
    post:
      tags:
        - product
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: product.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  /products/findOne:
    get:
      tags:
        - product
      summary: Find first instance of the model matched by filter from the data source.
      operationId: product.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  /products/update:
    post:
      tags:
        - product
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: product.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /products/count:
    get:
      tags:
        - product
      summary: Count instances of the model matched by where from the data source.
      operationId: product.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/orders/{id}/products/{fk}':
    get:
      tags:
        - order
      summary: Find a related item by id for products.
      operationId: order.prototype.__findById__products
      parameters:
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    delete:
      tags:
        - order
      summary: Delete a related item by id for products.
      operationId: order.prototype.__destroyById__products
      parameters:
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - order
      summary: Update a related item by id for products.
      operationId: order.prototype.__updateById__products
      parameters:
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/product'
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  '/orders/{id}/products/rel/{fk}':
    put:
      tags:
        - order
      summary: Add a related item by id for products.
      operationId: order.prototype.__link__products
      parameters:
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/orderproduct'
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/orderproduct'
      deprecated: false
    delete:
      tags:
        - order
      summary: Remove the products relation to an item by id.
      operationId: order.prototype.__unlink__products
      parameters:
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - order
      summary: Check the existence of products relation to an item by id.
      operationId: order.prototype.__exists__products
      parameters:
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/orders/{id}/products':
    get:
      tags:
        - order
      summary: Queries products of order.
      operationId: order.prototype.__get__products
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/product'
      deprecated: false
    post:
      tags:
        - order
      summary: Creates a new instance in products of this model.
      operationId: order.prototype.__create__products
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/product'
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    delete:
      tags:
        - order
      summary: Deletes all products of this model.
      operationId: order.prototype.__delete__products
      parameters:
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/orders/{id}/products/count':
    get:
      tags:
        - order
      summary: Counts products of order.
      operationId: order.prototype.__count__products
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /orders:
    post:
      tags:
        - order
      summary: Create a new instance of the model and persist it into the data source.
      operationId: order.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
    put:
      tags:
        - order
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: order.upsert__put_orders
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
    patch:
      tags:
        - order
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: order.upsert__patch_orders
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
    get:
      tags:
        - order
      summary: Find all instances of the model matched by filter from the data source.
      operationId: order.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/order'
      deprecated: false
  /orders/replaceOrCreate:
    post:
      tags:
        - order
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: order.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
  /orders/upsertWithWhere:
    post:
      tags:
        - order
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: order.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
  '/orders/{id}/exists':
    get:
      tags:
        - order
      summary: Check whether a model instance exists in the data source.
      operationId: 'order.exists__get_orders_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/orders/{id}':
    head:
      tags:
        - order
      summary: Check whether a model instance exists in the data source.
      operationId: 'order.exists__head_orders_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - order
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: order.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
    delete:
      tags:
        - order
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: order.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - order
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'order.prototype.updateAttributes__put_orders_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/order'
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
    patch:
      tags:
        - order
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'order.prototype.updateAttributes__patch_orders_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/order'
        - name: id
          in: path
          description: order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
  '/orders/{id}/replace':
    post:
      tags:
        - order
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: order.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
  /orders/findOne:
    get:
      tags:
        - order
      summary: Find first instance of the model matched by filter from the data source.
      operationId: order.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/order'
      deprecated: false
  /orders/update:
    post:
      tags:
        - order
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: order.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/order'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /orders/count:
    get:
      tags:
        - order
      summary: Count instances of the model matched by where from the data source.
      operationId: order.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/customers/{id}/accessTokens/{fk}':
    get:
      tags:
        - customer
      summary: Find a related item by id for accessTokens.
      operationId: customer.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - customer
      summary: Delete a related item by id for accessTokens.
      operationId: customer.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - customer
      summary: Update a related item by id for accessTokens.
      operationId: customer.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/customers/{id}/accessTokens':
    get:
      tags:
        - customer
      summary: Queries accessTokens of customer.
      operationId: customer.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - customer
      summary: Creates a new instance in accessTokens of this model.
      operationId: customer.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - customer
      summary: Deletes all accessTokens of this model.
      operationId: customer.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/customers/{id}/accessTokens/count':
    get:
      tags:
        - customer
      summary: Counts accessTokens of customer.
      operationId: customer.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /customers:
    post:
      tags:
        - customer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: customer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
    put:
      tags:
        - customer
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: customer.upsert__put_customers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
    patch:
      tags:
        - customer
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: customer.upsert__patch_customers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
    get:
      tags:
        - customer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: customer.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
      deprecated: false
  /customers/replaceOrCreate:
    post:
      tags:
        - customer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: customer.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
  /customers/upsertWithWhere:
    post:
      tags:
        - customer
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: customer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
  '/customers/{id}/exists':
    get:
      tags:
        - customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'customer.exists__get_customers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/customers/{id}':
    head:
      tags:
        - customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'customer.exists__head_customers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - customer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: customer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
    delete:
      tags:
        - customer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: customer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - customer
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'customer.prototype.updateAttributes__put_customers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/customer'
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
    patch:
      tags:
        - customer
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'customer.prototype.updateAttributes__patch_customers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/customer'
        - name: id
          in: path
          description: customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
  '/customers/{id}/replace':
    post:
      tags:
        - customer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: customer.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
  /customers/findOne:
    get:
      tags:
        - customer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: customer.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customer'
      deprecated: false
  /customers/update:
    post:
      tags:
        - customer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: customer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/customer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /customers/count:
    get:
      tags:
        - customer
      summary: Count instances of the model matched by where from the data source.
      operationId: customer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /customers/login:
    post:
      tags:
        - customer
      summary: Login a user with username/email and password.
      operationId: customer.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /customers/logout:
    post:
      tags:
        - customer
      summary: Logout a user with access token.
      operationId: customer.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /customers/confirm:
    get:
      tags:
        - customer
      summary: Confirm a user registration with email verification token.
      operationId: customer.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /customers/reset:
    post:
      tags:
        - customer
      summary: Reset password for a user with email.
      operationId: customer.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
definitions:
  x-any:
    properties: {}
  order:
    properties:
      id:
        type: string
    additionalProperties: false
  orderproduct:
    properties:
      id:
        type: string
      orderId:
        type: string
      productId:
        type: string
    additionalProperties: false
  product:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        default: 0
        type: number
        format: double
    required:
      - name
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date-time
      userId:
        type: string
    required:
      - id
    additionalProperties: false
  customer:
    properties:
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
      id:
        type: string
    required:
      - email
    additionalProperties: false
basePath: /v2/api
swagger: '2.0'
info:
  x-ibm-name: shoppinglb
  version: 2.0.0
  title: shoppingLB
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - {}
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'https://apiconnect-b88bf090-2153-4347-b504-15df6f6e3050.laraziosinlibmcom-vu2018.apic.eu-gb.mybluemix.net'
        invoke-tls-profile: 'client:Loopback-client'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
          tls-profile: $(invoke-tls-profile)
  properties:
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
